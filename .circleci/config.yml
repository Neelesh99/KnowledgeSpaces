version: '2.1'
orbs:
  gradle: circleci/gradle@3.0.0
  node: circleci/node@5.0.2
  docker: circleci/docker@2.2.0
  gcp-gke: circleci/gcp-gke@2.2.0
  gcp-cli: circleci/gcp-cli@3.1.1
jobs:
  node_build_test: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
          app-dir: ~/project/frontend/frontend-app
      - run:
          command: |
            cd frontend/frontend-app
            npm run build
          name: Build app
  node_docker:
    executor: docker/machine
    steps:
        - checkout
        - docker/check
  deploy-ui:
    description: Deploy application to Google Kubernetes Engine
    executor: gcp-cli/default
    steps:
      - checkout
      - gcp-cli/setup:
          components: kubectl
      - run:
          command: |
            gcloud container clusters list
            gcloud container clusters get-credentials ui-cluster
            kubectl config current-context
            cd frontend/frontend-app
            kubectl apply --validate=true --dry-run=true -f admin/
            kubectl replace --validate=true -f admin/ --force
            sleep 30
            kubectl get services
  deploy-llm:
    description: Deploy application to Google Kubernetes Engine
    executor: gcp-cli/default
    steps:
      - checkout
      - gcp-cli/setup:
          components: kubectl
      - run:
          command: |
            gcloud container clusters list
            gcloud container clusters get-credentials llm-cluster
            kubectl config current-context
            cd LLMServer
            kubectl apply --validate=true --dry-run=true -f admin/
            kubectl replace --validate=true -f admin/ --force
            sleep 30
            kubectl get services

  deploy-backend:
    description: Deploy application to Google Kubernetes Engine
    executor: gcp-cli/default
    steps:
      - checkout
      - gcp-cli/setup:
          components: kubectl
          google_compute_zone: GOOGLE_COMPUTE_ZONE_2
      - run:
          command: |
            gcloud container clusters list
            gcloud container clusters get-credentials backend-cluster
            kubectl config current-context
            cd GPTBackendServer
            gcloud container clusters get-credentials backend-cluster --region=europe-west1
            kubectl create serviceaccount ksa-service-account --namespace cloud-storage-namespace
            gcloud iam service-accounts add-iam-policy-binding iam-service-account@knowledgespaces.iam.gserviceaccount.com --role roles/iam.workloadIdentityUser --member "serviceAccount:knowledgespaces.svc.id.goog[cloud-storage-namespace/ksa-service-account]"
            kubectl annotate serviceaccount ksa-service-account --namespace cloud-storage-namespace iam.gke.io/gcp-service-account=iam-service-account@knowledgespaces.iam.gserviceaccount.com
            kubectl apply --validate=true --dry-run=true -f admin/
            kubectl replace --validate=true -f admin/ --force --namespace=cloud-storage-namespace
            sleep 30
            kubectl get services
workflows:
  kotlin-build-test:
    jobs:
      - gradle/test:
          app_src_directory: GPTBackendServer/
      - gradle/run:
          app_src_directory: GPTBackendServer/
          command: jib
      - deploy-backend:
          requires:
            - gradle/run
  node-build-test:
    jobs:
      - node_build_test
      - node_docker
      - docker/publish:
            path: frontend/frontend-app/
            image: neeleshrav/knowledgespacesui
            tag: latest
            extra_build_args: --build-arg VITE_BACKEND_PREFIX=$VITE_BACKEND_PREFIX
      - deploy-ui:
            requires:
              - docker/publish
  python-publish:
    jobs:
      - docker/publish:
          path: LLMServer/
          image: neeleshrav/knowledgespacesllm
          tag: latest
          extra_build_args: '--build-arg DB_NAME=$DB_NAME --build-arg MONGO_DB_PASSWORD=$MONGO_DB_PASSWORD --build-arg MONGO_DB_USERNAME=$MONGO_DB_USERNAME --build-arg MONGO_CONNECTION_STRING_TEMPLATE="$MONGO_CONNECTION_STRING_TEMPLATE"'
      - deploy-llm:
          requires:
            - docker/publish

